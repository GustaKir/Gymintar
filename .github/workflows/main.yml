name: Main

on:
  push:
    branches: ["main"]
    tags:
      - "*-?v[0-9]+*"
  pull_request:
    branches: ["main"]
    types: [opened, synchronize]

permissions:
  contents: read

env:
  GHCR_REGISTRY: ghcr.io


jobs:
  pre-workflow-checks:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.set_outputs.outputs.should-run }}
      image-names: ${{ steps.set_outputs.outputs.image-names }}
      should-release: ${{ steps.set_outputs.outputs.should-release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          persist-credentials: false
      - name: Set outputs
        id: set_outputs
        uses: actions/github-script@v7
        with:
          script: |
            const repositoryName = context.payload.repository.name;
            const owner = context.repo.owner;
            const ghcrRegistry = process.env.GHCR_REGISTRY;

            let imageNames = [
              `name=${ghcrRegistry}/${owner}/${repositoryName}`,
              `name=${ghcrRegistry}/${owner}/${repositoryName}-pro`,
            ];

            let shouldRun = 'false';
            if (context.eventName === "push") {
              shouldRun = 'true';
            } else if (context.eventName === "pull_request") {
              const commitMsg = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              }).then(commit => commit.data.commit.message);
              if (commitMsg.includes("Run CI")) {
                shouldRun = 'true';
              }
            }

            core.setOutput('should-run', shouldRun);

             const shouldRelease =
              context.eventName === "push" && context.ref.startsWith("refs/tags/")
                ? 'true'
                : 'false';
            core.setOutput('should-release', shouldRelease);

            core.setOutput('image-names', imageNames.join('\n'));

  create-release:
    needs: [pre-workflow-checks]
    if: needs.pre-workflow-checks.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-backend:
    needs: [pre-workflow-checks]
    if: needs.pre-workflow-checks.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64-unknown-linux-gnu
          - target: aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Extract build information
        id: build
        env:
          TARGET: ${{ matrix.platform.target }}
        run: |
          echo "version=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"
          echo "docker-arch=${{ startsWith(matrix.platform.target, 'x86_64') && 'amd64' || 'arm64' }}" >> "$GITHUB_OUTPUT"
      - name: Extract rust toolchain
        id: toolchain
        run: |
          echo "channel=$(grep channel rust-toolchain.toml | awk -F' = ' '{printf $2}' | tr -d '"')" >> "$GITHUB_OUTPUT"
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.toolchain.outputs.channel }}
          targets: ${{ matrix.platform.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}-${{ steps.build.outputs.profile }}
          save-if: ${{ github.event_name != 'pull_request' }}
      - uses: actions/cache@v4
        with:
          path: target
          key: cargo-build-${{ runner.os }}-${{ matrix.platform.target }}-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
          restore-keys: |
            cargo-build-${{ runner.os }}-${{ matrix.platform.target }}-
      - name: Install cross
        uses: taiki-e/cache-cargo-install-action@v1
        with:
          tool: cross
          git: https://github.com/cross-rs/cross
          rev: 51f46f296253d8122c927c5bb933e3c4f27cc317
          locked: false
      - name: Build
        env:
          UNKEY_API_ID: ${{ secrets.UNKEY_API_ID }}
          APP_VERSION: ${{ steps.build.outputs.version }}
        run: |
          cross build --locked --target ${{ matrix.platform.target }} --release
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ steps.build.outputs.docker-arch }}
          path: ${{ github.workspace }}/target/${{ matrix.platform.target }}/release/backend
          retention-days: 1

  build-docker:
    needs: [pre-workflow-checks, build-backend]
    if: needs.pre-workflow-checks.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Download build artifact for docker
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/artifact/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.pre-workflow-checks.outputs.image-names }}
          tags: |
            type=ref,event=pr
            type=raw,value=develop,enable={{is_default_branch}}
            type=semver,pattern=v{{version}},enable=${{ needs.pre-workflow-checks.outputs.should-release == 'true' }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ needs.pre-workflow-checks.outputs.should-release == 'true' }}
            type=semver,pattern=v{{major}},enable=${{ needs.pre-workflow-checks.outputs.should-release == 'true' }}
            type=raw,value=latest,enable=${{ needs.pre-workflow-checks.outputs.should-release == 'true' }}
            type=sha
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
